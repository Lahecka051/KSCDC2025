
# 드론 컨트롤러 사용 메뉴얼

## 목차
1. [기본 사용법](#1-기본-사용법)
2. [주요 함수 상세 설명](#2-주요-함수-상세-설명)
3. [실전 예제](#3-실전-예제)
4. [중요 동작 특성](#4-중요-동작-특성)

---

## 1. 기본 사용법

### 빠른 시작
```python
from drone_controller import DroneCommandController

# 드론 객체 생성
drone = DroneCommandController('/dev/ttyACM0', 115200)

# FC 연결
drone.connect()

# 시동 걸기
drone.arm()

# 이륙 (2미터)
drone.takeoff(2.0)

# 전진 (1m/s)
drone.set_command(0, 1.0, 0)

# 착륙
drone.land()

# 시동 끄기
drone.disarm()
```

---

## 2. 주요 함수 상세 설명

### **`__init__(connection_string, baudrate)`**
드론 컨트롤러 객체 생성

```python
# 파라미터
connection_string: str  # 시리얼 포트 경로 (기본: '/dev/ttyACM0')
baudrate: int          # 통신 속도 (기본: 115200)

# 사용 예제
drone = DroneCommandController()  # 기본값 사용
drone = DroneCommandController('/dev/ttyTHS1', 57600)  # 커스텀 설정
```

---

### **`connect()`**
FC(Flight Controller)와 연결 설정

```python
# 반환값
True: 연결 성공
False: 연결 실패

# 사용 예제
if drone.connect():
    print("연결 성공!")
else:
    print("연결 실패")
    
# 연결 후 자동으로:
# - 50Hz로 데이터 수신 시작
# - 고도, GPS, 자세 정보 모니터링
```

---

### **`arm()`**
드론 시동 걸기

```python
# 반환값
True: 시동 성공
False: 시동 실패

# 사용 예제
if drone.arm():
    print("시동 걸림!")
    
# 주의: GUIDED 모드로 자동 전환됨
```

---

### **`disarm()`**
드론 시동 끄기

```python
# 반환값
True: 시동 해제 성공
False: 시동 해제 실패

# 사용 예제
drone.disarm()

# 주의: 정상 모드로 시동 해제 (강제 아님)
# 공중에서는 작동 안할 수 있음
# FC 기본값: 착륙 후 10초 뒤 자동 시동 해제 (DISARM_DELAY=10)
```

---

### **`takeoff(altitude, ascent_rate)`**
이륙 명령

```python
# 파라미터
altitude: float or None     # 목표 고도(m) - None이면 FC 기본값
ascent_rate: float or None  # 상승 속도(m/s) - None이면 FC 자동

# 반환값
True: 이륙 성공
False: 이륙 실패

# 사용 예제
drone.takeoff()             # FC 기본값: 고도 1.5m (PILOT_TKOFF_ALT), 속도 2.5m/s (PILOT_SPEED_UP)
drone.takeoff(2.0)          # 2m 높이, FC 자동 속도 2.5m/s
drone.takeoff(3.0, 0.5)     # 3m 높이, 0.5m/s 속도
drone.takeoff(altitude=2.5) # 2.5m 높이, FC 자동 속도 2.5m/s
drone.takeoff(None, 0.3)    # FC 기본 고도 1.5m, 0.3m/s 속도

# 상승률 가이드:
# 0.3-0.5 m/s: 안전/실내 (천천히)
# 1.0-1.5 m/s: 일반 실외 (보통)
# 2.0-3.0 m/s: 빠른 상승 (실외)
# FC 기본값: 2.5m/s (PILOT_SPEED_UP)
# FC 최대값: 5.0m/s
```

---

### **`land()`**
착륙 명령

```python
# 반환값 없음 (자동 완료 대기)

# 사용 예제
drone.land()  # FC 기본 착륙 속도: 0.5m/s (LAND_SPEED)

# 동작:
# 1. LAND 모드로 전환
# 2. 자동으로 현재 위치에 착륙
# 3. 지면 감지시까지 대기
# 4. 10m 이상 고도: 1.5m/s로 하강 (LAND_SPEED_HIGH)
# 5. 10m 이하 고도: 0.5m/s로 감속 (LAND_SPEED)

# 중요: 착륙 후에도 시동은 켜진 상태로 유지됨
# 완전 종료를 원하면:
drone.land()
drone.disarm()  # 명시적 시동 해제 필요
# 또는 FC 설정에 따라 10초 후 자동 해제 (DISARM_DELAY=10)
```

---

### **`set_command(vertical, horizontal1, horizontal2, rotation)`**
드론 이동 명령 (핵심 제어 함수)

```python
# 파라미터
vertical: float      # 수직 속도(m/s) - 양수:상승, 음수:하강, 0:유지
horizontal1: float   # 전후 속도(m/s) - 양수:전진, 음수:후진, 0:유지  
horizontal2: float   # 좌우 속도(m/s) - 양수:좌측, 음수:우측, 0:유지
rotation: float or None  # 목표 방향(0-359도) - None:회전안함

# 반환값
True: 명령 전송 성공
False: 명령 실패 (시동 꺼짐 등)

# 사용 예제 - 단일 동작
drone.set_command(1.0, 0, 0)       # 1m/s로 상승 (FC 최대: 2.5m/s PILOT_SPEED_UP)
drone.set_command(-0.5, 0, 0)      # 0.5m/s로 하강 (FC 최대: 1.5m/s PILOT_SPEED_DN)
drone.set_command(0, 2.0, 0)       # 2m/s로 전진 (FC 최대: 5m/s WPNAV_SPEED)
drone.set_command(0, -1.5, 0)      # 1.5m/s로 후진 (FC 최대: 5m/s)
drone.set_command(0, 0, 1.0)       # 1m/s로 좌측 이동 (FC 최대: 5m/s)
drone.set_command(0, 0, -1.0)      # 1m/s로 우측 이동 (FC 최대: 5m/s)
drone.set_command(0, 0, 0, 90)     # 90도 방향으로 회전 (FC 회전속도: 30-45도/초)
drone.set_command(0, 0, 0, 0)      # 호버링 (모든 속도 0)

# 사용 예제 - 복합 동작
drone.set_command(0.5, 1.0, 0)     # 상승하면서 전진
drone.set_command(0, 1.0, 0.5)     # 전진하면서 좌측 이동
drone.set_command(0, 1.0, 0, 180)  # 전진하면서 180도 회전
drone.set_command(-0.3, -1.0, 0)   # 하강하면서 후진

# FC가 속도를 자동 제한:
drone.set_command(10, 0, 0)        # 10m/s 요청 → FC가 2.5m/s로 제한 (PILOT_SPEED_UP)
drone.set_command(0, 20, 0)        # 20m/s 요청 → FC가 5m/s로 제한 (WPNAV_SPEED)
```

---

### **`rotate_to(target_angle, rotation_speed)`**
특정 방향으로 회전

```python
# 파라미터
target_angle: float         # 목표 방향(0-359도) - 0:북, 90:동, 180:남, 270:서
rotation_speed: float or None  # 회전 속도(도/초) - None이면 FC 자동

# 반환값
True: 회전 명령 전송
False: 실패 (시동 꺼짐)

# 사용 예제
drone.rotate_to(90)         # 동쪽(90도)으로 회전, FC 기본 속도 30-45도/초
drone.rotate_to(0)          # 북쪽(0도)으로 회전, FC 기본 속도
drone.rotate_to(180, 45)    # 남쪽으로 45도/초 속도로 회전
drone.rotate_to(270, 0)     # 서쪽으로 회전, FC 기본 속도 사용 (0 = FC 자동)

# FC가 자동으로 최단 경로 선택
# 예: 현재 10도 → 350도 목표 = 반시계 20도 회전
# FC 최대 회전 가속도: 6000 센티도/초² (ATC_SLEW_YAW)

# 주의: 연속 호출시 마지막 명령만 실행됨
for angle in [90, 180, 270, 0]:
    drone.rotate_to(angle)  # 즉시 다음 명령으로 덮어씀
    # 결과: 0도로만 회전함

# 올바른 사용법: 각 회전 완료 대기
for angle in [90, 180, 270, 0]:
    drone.rotate_to(angle)
    time.sleep(3)  # 회전 완료 대기 (90도 회전시 약 2-3초 소요)
```

---

### **`emergency_hover(reason)`**
긴급 호버링 (비상 정지)

```python
# 파라미터
reason: str  # 호버링 사유 (기본: "외부 요청")

# 반환값
True: 호버링 성공
False: 실패 (시동 꺼짐)

# 사용 예제
drone.emergency_hover()                    # 기본 사유
drone.emergency_hover("장애물 감지")        # 커스텀 사유
drone.emergency_hover("배터리 부족")

# 동작:
# 1. 모든 속도를 즉시 0으로 설정
# 2. 현재 위치에서 호버링 (FC 위치 유지 게인: POS_XY_P=1.0, VEL_XY_P=1.0)
# 3. GUIDED 모드 유지 (재명령 가능)
```

---

### **`get_status()`**
드론 상태 정보 조회

```python
# 반환값 (dictionary)
{
    'connected': bool,          # FC 연결 상태
    'armed': bool,             # 시동 상태
    'altitude': float,         # 현재 고도(m)
    'altitude_source': str,    # 고도 소스 (VFR_HUD/LOCAL_NED/GLOBAL_REL)
    'vfr_alt': float,         # 기압계 고도 (정확도 ±0.1m 실내, ±0.5m 실외)
    'ned_alt': float,         # NED 고도
    'rel_alt': float,         # 상대 고도
    'gps': (lat, lon),        # GPS 좌표 (위도, 경도) - 정확도 ±2-5m
    'heading': float,         # 현재 방향(도) 0-359
    'position': (x, y, z),    # 로컬 위치(m)
    'emergency': bool,        # 긴급 호버링 상태
    'command': [v,h1,h2,r]    # 현재 명령값
}

# 사용 예제
status = drone.get_status()
print(f"고도: {status['altitude']:.2f}m")
print(f"GPS: {status['gps']}")
print(f"시동: {'ON' if status['armed'] else 'OFF'}")

# 실시간 모니터링 예제
while True:
    status = drone.get_status()
    print(f"Alt: {status['altitude']:.1f}m, "
          f"GPS: ({status['gps'][0]:.6f}, {status['gps'][1]:.6f}), "
          f"Dir: {status['heading']:.0f}°")
    time.sleep(1)
```

---

### **`get_reliable_altitude()`**
가장 신뢰할 수 있는 고도 정보 반환

```python
# 반환값
altitude: float  # 고도(m)
source: str     # 소스 (VFR_HUD/LOCAL_NED/GLOBAL_REL/NONE)

# 사용 예제
alt, source = drone.get_reliable_altitude()
print(f"현재 고도: {alt:.2f}m (소스: {source})")

# 우선순위:
# 1. VFR_HUD (기압계) - 가장 안정적, 정확도 ±0.1m (실내) / ±0.5m (실외)
# 2. LOCAL_NED (EKF 융합) - 정확도 ±0.2m
# 3. GLOBAL_REL (GPS 상대고도) - 정확도 ±5-10m
```

---

## 3. 실전 예제

### 예제 1: 기본 비행
```python
# 정사각형 패턴 비행
from drone_controller import DroneCommandController
import time

drone = DroneCommandController()
drone.connect()
drone.takeoff(2.0)  # 2m 이륙, FC 기본 상승속도 2.5m/s 사용

# 정사각형 비행
for _ in range(4):
    drone.set_command(0, 1.0, 0)    # 1m/s 전진 (FC 최대 5m/s까지 가능)
    time.sleep(3)                    # 3초간 = 3m 이동
    drone.rotate_to(drone.current_heading + 90)  # 90도 회전 (약 2-3초 소요)
    time.sleep(2)

drone.land()  # FC 기본 착륙속도 0.5m/s
drone.disarm()
```

### 예제 2: 안전 기능 포함
```python
# 장애물 회피 시뮬레이션
def fly_with_safety():
    drone = DroneCommandController()
    
    try:
        drone.connect()
        drone.takeoff(1.5)  # FC 기본 고도 1.5m로 이륙
        
        # 전진 중 장애물 감지 시뮬레이션
        drone.set_command(0, 2.0, 0)  # 2m/s 전진 (FC 최대 5m/s)
        time.sleep(2)
        
        # 장애물 감지! 긴급 정지
        drone.emergency_hover("장애물 감지")
        time.sleep(2)
        
        # 우회
        drone.set_command(0, 0, 1.0)  # 1m/s로 좌측 이동
        time.sleep(2)
        drone.set_command(0, 1.0, 0)  # 다시 1m/s 전진
        time.sleep(2)
        
    except KeyboardInterrupt:
        print("사용자 중단!")
        drone.emergency_hover("사용자 중단")
    finally:
        drone.land()  # 0.5m/s로 착륙
        drone.disarm()  # 또는 10초 후 자동 해제
```

### 예제 3: 상태 모니터링
```python
# 비행 중 실시간 상태 확인
import threading

def monitor_drone(drone):
    """별도 스레드에서 상태 모니터링"""
    while drone.is_armed:
        status = drone.get_status()
        alt = status['altitude']  # 기압계 기준 고도
        gps = status['gps']  # GPS 좌표 (정확도 ±2-5m)
        heading = status['heading']  # 0-359도
        print(f"[모니터] 고도:{alt:.1f}m, GPS:({gps[0]:.6f},{gps[1]:.6f}), 방향:{heading:.0f}°")
        time.sleep(1)

# 메인 비행
drone = DroneCommandController()
drone.connect()
drone.arm()

# 모니터링 시작
monitor_thread = threading.Thread(target=monitor_drone, args=(drone,))
monitor_thread.start()

# 비행 수행
drone.takeoff(2.0)  # 2m, FC 기본 속도 2.5m/s
drone.set_command(0, 1.0, 0)  # 1m/s 전진
time.sleep(5)
drone.land()  # 0.5m/s로 착륙
drone.disarm()
```

### 예제 4: 자동 미션
```python
# 자동 미션 (상대 이동)
def auto_mission():
    drone = DroneCommandController()
    drone.connect()
    
    # 미션 정의
    mission = [
        {'action': 'takeoff', 'altitude': 3.0},  # 3m, FC 기본 속도 2.5m/s로 이륙
        {'action': 'move', 'v': 0, 'h1': 2, 'h2': 0, 'duration': 3},  # 2m/s로 전진 3초
        {'action': 'rotate', 'angle': 90},  # 90도 회전 (FC 기본 30-45도/초)
        {'action': 'move', 'v': 0, 'h1': 2, 'h2': 0, 'duration': 3},  # 2m/s로 전진 3초
        {'action': 'hover', 'duration': 2},  # 호버링 2초
        {'action': 'land'}  # FC 기본 속도 0.5m/s로 착륙
    ]
    
    # 미션 실행
    for step in mission:
        if step['action'] == 'takeoff':
            drone.takeoff(step['altitude'])  # FC 기본 상승속도 2.5m/s 사용
            time.sleep(2)
        elif step['action'] == 'move':
            drone.set_command(step['v'], step['h1'], step['h2'])
            time.sleep(step['duration'])
        elif step['action'] == 'rotate':
            drone.rotate_to(step['angle'])  # FC 기본 회전속도 사용
            time.sleep(2)
        elif step['action'] == 'hover':
            drone.set_command(0, 0, 0)
            time.sleep(step['duration'])
        elif step['action'] == 'land':
            drone.land()
    
    drone.disarm()
```

---

## 4. 중요 동작 특성

### 명령 우선순위 및 덮어쓰기
```python
# 새 명령은 항상 이전 명령을 취소함

# 잘못된 예: 연속 명령
drone.rotate_to(90)   # FC 기본 30-45도/초로 회전 시작
drone.rotate_to(180)  # 즉시 취소되고 180도로
drone.rotate_to(270)  # 이전 명령들 모두 취소, 270도로만 회전

# 올바른 예: 완료 대기
drone.rotate_to(90)   # 90도 회전 (약 2-3초 소요)
time.sleep(3)         # 회전 완료 대기
drone.rotate_to(180)  # 180도로 회전
time.sleep(3)
```

### 착륙 후 시동 상태
```python
# land()는 착륙만 수행, 시동은 유지됨
drone.land()  # 0.5m/s로 착륙 완료 후에도 시동 ON

# 완전 종료를 위해서는 명시적 시동 해제 필요
drone.land()    # 착륙
time.sleep(1)   # 안전 대기
drone.disarm()  # 시동 OFF

# 또는 FC 설정에 따라 10초 후 자동 해제 (DISARM_DELAY=10)
```

### 명령 상호작용
```python
# set_command()는 모든 이전 이동 명령을 덮어씀
drone.rotate_to(90)           # 회전 시작 (FC 기본 속도)
drone.set_command(0, 1.0, 0)  # 회전 취소, 1m/s 전진만

# emergency_hover()는 최우선 - 모든 명령 중단
drone.set_command(0, 5.0, 0)  # 5m/s 빠른 전진 (FC 최대 속도)
drone.emergency_hover()        # 즉시 정지

# GUIDED 모드에서만 명령 가능
# LAND 모드: 착륙만 (다른 명령 무시)
# AUTO 모드: 미션만 (수동 명령 무시)
```

### FC 기본값 활용
```python
# None 또는 0을 전달하면 FC가 자동 결정
drone.takeoff()           # FC 기본: 1.5m 고도 (PILOT_TKOFF_ALT), 2.5m/s 속도 (PILOT_SPEED_UP)
drone.takeoff(None, None) # 동일
drone.takeoff(0, 0)       # 동일

drone.rotate_to(90, None) # FC 기본 회전 속도 30-45도/초
drone.rotate_to(90, 0)    # 동일
```

### 안전 권장사항
```python
# 1. 항상 예외 처리
try:
    drone.takeoff(2.0)        # 2m, FC 기본 속도 2.5m/s
    drone.set_command(0, 1.0, 0)  # 1m/s 전진
except Exception as e:
    drone.emergency_hover(f"예외: {e}")
    drone.land()              # 0.5m/s로 안전 착륙
    drone.disarm()

# 2. 실내 비행시 낮은 속도/고도
drone.takeoff(1.0, 0.3)      # 1m, 0.3m/s (실내 안전 속도)
drone.set_command(0, 0.5, 0)  # 0.5m/s 전진 (실내 권장)

# 3. 명령 간 충분한 대기시간
drone.rotate_to(90)   # 90도 회전 시작
time.sleep(3)         # 완료 대기 (FC 기본 속도로 약 2-3초)
drone.set_command(0, 1.0, 0)
```

---

**버전:** 1.0  
**최종 수정:** 2025 
**지원 FC:** ArduPilot (Copter 4.0+)