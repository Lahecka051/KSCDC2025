import asyncio
import logging
from mavsdk import System
from mavsdk.action import ActionError

# --- 로깅 설정 ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

async def wait_for_connection(drone):
    """드론이 연결될 때까지 기다리는 헬퍼 함수"""
    async for state in drone.core.connection_state():
        if state.is_connected:
            logging.info("FC 발견 및 연결 성공!")
            return True
    return False

async def run():
    """
    드론을 시동(Arm)하고 모든 모터를 함께 회전시키는 테스트 함수
    """
    drone = System()
    connection_string = "serial:///dev/ttyTHS0:115200"
    
    logging.info(f"FC에 연결을 시도합니다: {connection_string}")
    await drone.connect(system_address=connection_string)

    try:
        await asyncio.wait_for(wait_for_connection(drone), timeout=10.0)
        
        logging.info("FC의 상태를 확인합니다...")
        # 이륙 전 상태 확인 (필수는 아니지만 좋은 습관)
        async for health in drone.telemetry.health():
            if health.is_armable:
                logging.info("FC가 시동 가능한 상태입니다.")
                break
            else:
                logging.info("FC가 아직 시동 가능한 상태가 아닙니다. 잠시 대기...")
                await asyncio.sleep(1)

        logging.warning("--- 3초 후 기체를 시동(Arm)합니다! ---")
        await asyncio.sleep(3)
        
        try:
            await drone.action.arm()
            logging.info("시동 성공!")
        except ActionError as e:
            logging.error(f"시동 실패: {e}")
            return

        logging.info("--- 2초 후 모든 모터를 20% 파워로 10초간 회전시킵니다. ---")
        await asyncio.sleep(2)
        
        # 구버전 MAVSDK에서는 manual_control을 사용하여 스로틀을 제어할 수 있습니다.
        # 이 제어를 시작하기 전에 start_position_control()을 호출해야 할 수 있습니다.
        # 만약 아래 코드가 실패하면, 이 부분은 주석 처리하고 다시 시도하세요.
        try:
            await drone.manual_control.start_position_control()
        except ActionError as e:
            logging.warning(f"start_position_control() 호출 실패(무시 가능): {e}")

        await drone.manual_control.set_thrust(0.2) # 모든 모터를 20% 파워로 회전
        await asyncio.sleep(10)
        await drone.manual_control.set_thrust(0.0) # 모터 정지

        logging.info("--- 2초 후 시동을 해제(Disarm)합니다. ---")
        await asyncio.sleep(2)
        await drone.action.disarm()
        logging.info("시동 해제 완료.")


    except asyncio.TimeoutError:
        logging.error("연결 시간 초과! FC와의 연결을 확인하세요.")
    
    except Exception as e:
        logging.error(f"예상치 못한 오류 발생: {e}")
    finally:
        logging.info("--- 테스트가 종료되었습니다. ---")

if __name__ == "__main__":
    print("===================================================================")
    print("경고: 이 스크립트는 기체를 시동(ARM)하고 모터를 회전시킵니다.")
    print("안전을 위해 반드시 모든 프로펠러를 제거했는지 확인하십시오.")
    print("===================================================================")

    for i in range(5, 0, -1):
        print(f"{i}초 후 시작...")
        asyncio.run(asyncio.sleep(1))
        
    asyncio.run(run())
