import time
from dronekit import connect, VehicleMode, mavutil

def connect_drone(connection_string, baud=921600):
    """
    Connects to the drone using the specified UART port and baud rate.
    
    Args:
        connection_string (str): The UART port (e.g., '/dev/ttyTHS1').
        baud (int): The baud rate, must match the ArduPilot config.

    Returns:
        The connected drone object (DataRT), or None if connection fails.
    """
    try:
        DataRT = connect(connection_string, baud=baud, wait_ready=True)
        return DataRT
    except Exception:
        return None

def arm_and_takeoff(DataRT, target_altitude):
    """
    Arms the drone and takes off to a specified altitude.
    This function only works in GUIDED mode.
    """
    while not DataRT.is_armable:
        time.sleep(1)

    DataRT.mode = VehicleMode("GUIDED")
    DataRT.armed = True

    while not DataRT.armed:
        time.sleep(1)

    DataRT.simple_takeoff(target_altitude)

    # Wait until the drone reaches the target altitude
    while True:
        current_altitude = DataRT.location.global_relative_frame.alt
        if current_altitude >= target_altitude * 0.95:
            break
        time.sleep(1)

def send_velocity_command(DataRT, velocity_x, velocity_y, velocity_z, duration):
    """
    Sends a velocity command to the drone based on the NED coordinate system
    for a specified duration.
    """
    msg = DataRT.message_factory.set_position_target_local_ned_encode(
        0, 0, 0,
        mavutil.mavlink.MAV_FRAME_BODY_OFFSET_NED,
        0b0000111111000111,
        0, 0, 0,
        velocity_x, velocity_y, velocity_z,
        0, 0, 0, 0, 0)

    for _ in range(duration):
        DataRT.send_mavlink(msg)
        time.sleep(1)
    
    stop_msg = DataRT.message_factory.set_position_target_local_ned_encode(
        0, 0, 0, mavutil.mavlink.MAV_FRAME_BODY_OFFSET_NED,
        0b0000111111000111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    DataRT.send_mavlink(stop_msg)


# --- Shortcut Command Functions ---

def move_forward(DataRT, speed, duration):
    """Moves forward at 'speed' m/s for 'duration' seconds."""
    send_velocity_command(DataRT, speed, 0, 0, duration)

def move_backward(DataRT, speed, duration):
    """Moves backward at 'speed' m/s for 'duration' seconds."""
    send_velocity_command(DataRT, -speed, 0, 0, duration)

def move_right(DataRT, speed, duration):
    """Moves right at 'speed' m/s for 'duration' seconds."""
    send_velocity_command(DataRT, 0, speed, 0, duration)

def move_left(DataRT, speed, duration):
    """Moves left at 'speed' m/s for 'duration' seconds."""
    send_velocity_command(DataRT, 0, -speed, 0, duration)

def move_up(DataRT, speed, duration):
    """Moves up at 'speed' m/s for 'duration' seconds."""
    send_velocity_command(DataRT, 0, 0, -speed, duration)

def move_down(DataRT, speed, duration):
    """Moves down at 'speed' m/s for 'duration' seconds."""
    send_velocity_command(DataRT, 0, 0, speed, duration)

def land_and_close(DataRT):
    """
    Lands the drone and closes the connection.
    """
    DataRT.mode = VehicleMode("LAND")
    while DataRT.armed:
        time.sleep(1)
    
    DataRT.close()
